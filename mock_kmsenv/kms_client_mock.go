// Code generated by MockGen. DO NOT EDIT.
// Source: kms_client.go

// Package mock_kmsenv is a generated GoMock package.
package mock_kmsenv

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gax "github.com/googleapis/gax-go/v2"
	kms "google.golang.org/genproto/googleapis/cloud/kms/v1"
	reflect "reflect"
)

// MockKmsClient is a mock of KmsClient interface
type MockKmsClient struct {
	ctrl     *gomock.Controller
	recorder *MockKmsClientMockRecorder
}

// MockKmsClientMockRecorder is the mock recorder for MockKmsClient
type MockKmsClientMockRecorder struct {
	mock *MockKmsClient
}

// NewMockKmsClient creates a new mock instance
func NewMockKmsClient(ctrl *gomock.Controller) *MockKmsClient {
	mock := &MockKmsClient{ctrl: ctrl}
	mock.recorder = &MockKmsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKmsClient) EXPECT() *MockKmsClientMockRecorder {
	return m.recorder
}

// Decrypt mocks base method
func (m *MockKmsClient) Decrypt(ctx context.Context, req *kms.DecryptRequest, opts ...gax.CallOption) (*kms.DecryptResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Decrypt", varargs...)
	ret0, _ := ret[0].(*kms.DecryptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt
func (mr *MockKmsClientMockRecorder) Decrypt(ctx, req interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockKmsClient)(nil).Decrypt), varargs...)
}
